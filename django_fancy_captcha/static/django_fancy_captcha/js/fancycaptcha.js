// Generated by CoffeeScript 1.3.3
(function() {
  var Cube,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Cubes = (function() {

    function Cubes(selector) {
      this.updateField = __bind(this.updateField, this);

      this.cubeRotated = __bind(this.cubeRotated, this);

      this.start = __bind(this.start, this);

      var field_id;
      this.selector = selector;
      field_id = '#' + this.selector.data('for');
      if (field_id) {
        this.field = $(field_id);
        this.cubes = [];
        this.start();
      }
    }

    Cubes.prototype.start = function() {
      var i, val, values, _i, _len,
        _this = this;
      this.value = [];
      this.selector.find('.cube3d').each(function(idx, ele) {
        var c;
        c = new Cube(idx, $(ele), _this);
        _this.cubes.push(c);
        return _this.value.push(0);
      });
      if (this.field.val().match(/^[\d,]+$/)) {
        values = this.field.val().split(',');
        i = 0;
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          val = values[_i];
          val = parseInt(val, 10);
          this.cubes[i].rotate(val);
          i += 1;
        }
      }
      return this.updateField();
    };

    Cubes.prototype.cubeRotated = function(cube) {
      this.value[cube.idx] = cube.value();
      return this.updateField();
    };

    Cubes.prototype.updateField = function() {
      return this.field.val(this.value.join(","));
    };

    return Cubes;

  })();

  Cube = (function() {

    function Cube(idx, selector, parent) {
      this.value = __bind(this.value, this);

      this.updateCss = __bind(this.updateCss, this);

      this.rotate = __bind(this.rotate, this);

      this.addEvents = __bind(this.addEvents, this);
      this.idx = idx;
      this.selector = selector;
      this.rotation = 0;
      this.parent = parent;
      this.addEvents();
    }

    Cube.prototype.addEvents = function() {
      var _this = this;
      return this.selector.click(function(event) {
        return _this.rotate(1);
      });
    };

    Cube.prototype.rotate = function(direction) {
      this.rotation += direction * 90;
      this.updateCss();
      return this.parent.cubeRotated(this);
    };

    Cube.prototype.updateCss = function() {
      return this.setVendorCss(this.selector, 'transform', "rotateX(" + this.rotation + "deg)");
    };

    Cube.prototype.value = function() {
      var r;
      r = this.rotation % 360;
      if (r < 0) {
        r += 360;
      }
      return r / 90;
    };

    Cube.prototype.setVendorCss = function(obj, prop, val) {
      var prefix, _i, _len, _ref, _results;
      obj.css(prop, val);
      _ref = ['webkit', 'moz', 'o', 'ms'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prefix = _ref[_i];
        _results.push(obj.css("-" + prefix + "-" + prop, val));
      }
      return _results;
    };

    return Cube;

  })();

  $(function() {
    if ($('.cube3d-container').length) {
      return new Cubes($('.cube3d-container'));
    }
  });

}).call(this);
